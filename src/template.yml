AWSTemplateFormatVersion: 2010-09-09
Description: AWS CFN template for ViolArtStudio Backend

Parameters: 
  Environment: 
    Description: The name of the deployment environment 
    Type: String
    Default: dev
  S3Bucket:
    Description: S3 bucket containing the deployment scripts
    Type: String
    AllowedPattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
    Default: violart

Resources:
  SendEmail:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub send_email-${Environment}
      Description: Lambda function that sends an email
      Role: !GetAtt SendEmailRole.Arn
      Runtime: nodejs10.x
      Handler: handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: artifacts/email/send_email.js
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: Violart

  SendEmailLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/lambda/${SendEmail}"

  SendEmailRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub send-email-lambda-role-${Environment}
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole

  SendEmailPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub send-email-lambda-policy-${Environment}
      Roles: [SendEmailRole]
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: [!GetAtt SendEmailLogs.Arn]
          - Effect: Allow
            Action: ses:SendEmail
            Resource: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*

  GenerateEmailBody:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub generate_violart_email_body-${Environment}
      Description: Lambda function that generates an email body
      Role: !GetAtt GenerateEmailRole.Arn
      Runtime: nodejs10.x
      Handler: handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: artifacts/email/generate_email.js
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: Violart

  GenerateEmailLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/lambda/${GenerateEmailBody}"

  GenerateEmailRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub generate-email-lambda-role-${Environment}
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole

  GenerateEmailPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub generate-email-lambda-policy-${Environment}
      Roles: [GenerateEmailRole]
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: [!GetAtt GenerateEmailLogs.Arn]

  GenerateEmailSubject:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub generate_violart_email_subject-${Environment}
      Description: Lambda function that generates an email subject
      Role: !GetAtt GenerateSubjectRole.Arn
      Runtime: nodejs10.x
      Handler: handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: artifacts/email/generate_subject.js
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: Violart

  GenerateSubjectLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/lambda/${GenerateEmailSubject}"

  GenerateSubjectRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub generate-subject-lambda-role-${Environment}
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole

  GenerateSubjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub generate-subject-lambda-policy-${Environment}
      Roles: [GenerateSubjectRole]
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: [!GetAtt GenerateSubjectLogs.Arn]

Outputs:
  SendEmailLambda:
    Description: The ARN of the email sending lambda function
    Value: !Ref SendEmail
  GenerateEmailBodyLambda:
    Description: The ARN of the email body generator lambda function
    Value: !Ref GenerateEmailBody
  GenerateEmailSubjectLambda:
    Description: The ARN of the email subject generator lambda function
    Value: !Ref GenerateEmailSubject