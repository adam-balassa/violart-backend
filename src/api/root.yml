AWSTemplateFormatVersion: 2010-09-09
Description: ViolArt Backend API
Parameters:
  Environment:
    Description: Environment
    Type: String
    AllowedValues: [test, dev, prod]
    Default: dev
  TemplateBucket:
    Description: S3 Bucket containing the nested stack template fiels
    Type: String
    AllowedPattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
    Default: violart
Resources:
  SendEmail:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateBucket}.s3.eu-central-1.amazonaws.com/templates/email/root.yml
      Parameters:
        Environment: !Ref Environment
        TemplateBucket: !Ref TemplateBucket

  BackendApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Sub ${Environment} API for ViolArt Backend
      Name: !Sub violart-api-${Environment}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: Violart

  EmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: mail
      RestApiId: !Ref BackendApi
      ParentId: !GetAtt BackendApi.RootResourceId

  SendEmailRequest:
    Type: "AWS::ApiGateway::Model"
    Properties:
      RestApiId: !Ref BackendApi
      ContentType: application/json
      Description: Email sending request model
      Name: SendEmailRequest
      Schema:
        type: object
        $schema: "http://json-schema.org/draft-04/schema#"
        required:
          - sender
          - subject
          - body
        properties:
          sender:
            type: string
            pattern: "^[a-zA-Z0-9._%+-]{1,64}@(?:[a-zA-Z0-9-]{1,63}.){1,125}[a-zA-Z]{2,63}$"
          subject:
            type: string
            maxLength: 30
          body:
            type: string
            minLength: 3
        title: SendEmailRequest

  RequestBodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref BackendApi
      ValidateRequestBody: true

  SendEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Send automatic email
      RestApiId: !Ref BackendApi
      ResourceId: !Ref EmailResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestModels:
        application/json: !Ref SendEmailRequest
      RequestValidatorId: !Ref RequestBodyValidator
      Integration:
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        Credentials: !GetAtt MethodExecuteStateMachineRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub |
            { 
              "input": "$util.escapeJavaScript($input.json('$'))",
              "stateMachineArn": "${SendEmail.Outputs.SendEmailArn}"
            }
        IntegrationResponses:
          - ResponseTemplates:
              application/json: '{"error": false}'
            StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  MethodExecuteStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt SendEmail.Outputs.SendEmailArn
          PolicyName: SendFullEmailCallLambdas

  MailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Options for CORS
      RestApiId: !Ref BackendApi
      ResourceId: !Ref EmailResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - ResponseTemplates:
              application/json: Empty
            StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"

  MockEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: Mock Endpoint
      RestApiId: !Ref BackendApi
      ResourceId: !Ref EmailResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - ResponseTemplates:
              application/json: '{"message": "Hello World!"}'
            StatusCode: "200"
      MethodResponses:
        - StatusCode: "200"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [MockEndpoint, MailOptionsMethod, SendEmailMethod]
    Properties: 
      RestApiId: !Ref BackendApi
      StageName: !Ref Environment 
      StageDescription:
        LoggingLevel: INFO
        MetricsEnabled: true
        Description: !Sub ${Environment} deploymentof Violart API
  
Outputs:
  ApiUrl:
    Description: Violart API invoke URL
    Value: !Sub https://${BackendApi}.execute-api.eu-central-1.amazonaws.com/${Environment}